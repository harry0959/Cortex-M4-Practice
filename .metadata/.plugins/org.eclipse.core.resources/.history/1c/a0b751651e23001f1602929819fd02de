/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "main.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void task1_handler(void);
void task2_handler(void);
void task3_handler(void);
void task4_handler(void);

void init_systick_timer(uint32_t tick_hz);
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack);
void init_task_stack(void);
void enable_processor_faults(void);


uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};

uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; //task 1 is running
int main(void)
{
	enable_processor_faults();

	init_scheduler_stack(SCHED_STACK_START);

	task_handlers[0] = (uint32_t)task1_handler;
	task_handlers[1] = (uint32_t)task2_handler;
	task_handlers[2] = (uint32_t)task3_handler;
	task_handlers[3] = (uint32_t)task4_handler;


	init_task_stack();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();

	task1_handler();

    /* Loop forever */
	for(;;);
}


void task1_handler(void)
{
	while(1)
	{
		printf("This is Task1\n");
	}
}

void task2_handler(void)
{
	while(1)
	{
		printf("This is Task2\n");
	}
}

void task3_handler(void)
{
	while(1)
	{
		printf("This is Task3\n");
	}
}

void task4_handler(void)
{
	while(1)
	{
		printf("This is Task4\n");
	}
}


void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;

	//clear SRVR (24bits effect)
	*pSRVR &= ~(0x00FFFFFF);

	//load the value into SRVR
	*pSRVR |= count_value;

	//do some SCSR setting
	*pSCSR |= 1 << 1; // enable systick exception request
	*pSCSR |= 1 << 2; // clock source HSI

	//enable counter
	*pSCSR |= 1 << 0;

}

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	__asm volatile("MSR MSP, R0":: "r"(sched_top_of_stack));
	__asm volatile("BX LR");
}



void init_task_stack(void)
{
	uint32_t *pPSP;

	for(int i=0; i<MAX_TASKS; i++)
	{
		pPSP = (uint32_t*)psp_of_tasks[i];

		//why do pPSP-- first?
		pPSP--;
		*pPSP = DUMMY_XPSR; //0x01000000

		pPSP--; //PC
		*pPSP = task_handlers[i];

		pPSP--; //LR
		*pPSP = 0xFFFFFFFD;

		for(int j=0; j<13; j++)
		{
			pPSP--; //R0~R12
			*pPSP = 0;
		}

		psp_of_tasks[i] = (uint32_t)pPSP;

	}

}

void enable_processor_faults(void)
{
	// System Handler Control and State Register
	uint32_t *pSHCRS = (uint32_t*)0xE000ED24;

	//18th bit usage fault,17:bus, 16:memory fault
	*pSHCRS |= (1 << 18);
	*pSHCRS |= (1 << 17);
	*pSHCRS |= (1 << 16);
}

uint32_t get_psp_value(void)
{
	return psp_of_tasks[current_task];
}

__attribute__((naked)) void switch_sp_to_psp(void)
{
	// initialize the psp with task1 stack start address

	// get the value of psp with current task
	__asm volatile("PUSH {LR}"); //preserve LR with connect back to main
	__asm volatile("MSR PSP ,R0"); // initialize psp
	__asm volatile("POP {LR}"); // pops bask LR value

	//switch to psp
	__asm volatile("MOV R0, #0x02");
	__asm volatile("MSR CONTROL, R0");
	__asm volatile("BX LR");
}


void SysTick_Handler(void)
{

}

void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);
}


void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);
}
